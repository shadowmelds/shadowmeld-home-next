import style from "../styles/Blog.module.css";
import Head from "next/head";
import {getMainTabs, getMarkdowns, getNavigations, getSocials} from "../data/data-loader";
import {useEffect, useRef, useState} from "react";
import {ASSETS_URL} from "../data/config";
import {loadJson, scrollToAnchor, switchDir} from "../data/utils";
import {LiveData, Observer} from "../data/livedata";
import Layout from "../components/layout";

export default function Blog({allMarkdowns, allTags, allYears}) {

    console.log(`${allMarkdowns} | ${allTags.length} | ${allYears.length}`)

    const [selectedTags, setSelectedTags] = useState([allTags[0]])
    const [selectedMarkdowns, setSelectedMarkdowns] = useState(allMarkdowns)

    let mySelectedTags = new LiveData(selectedTags)
    mySelectedTags.observer(
        new Observer((data) => {
            setSelectedTags(data)
        }
    ))

    const switchSelectTag = (tag) => {
        console.log(`origin0 ${JSON.stringify(mySelectedTags.mData)}`)

        console.log(`ÁÇπÂáª‰∫Ü: ${tag.tagName}`)

        if (tag.index === 0) {
            if (mySelectedTags.mData.indexOf(tag) <= -1) {
                mySelectedTags.postValue([tag])

            }
        } else {
            if (mySelectedTags.mData.indexOf(tag) > -1) {
                let origin = mySelectedTags.mData
                origin.splice(mySelectedTags.mData.indexOf(tag), 1)
                if (mySelectedTags.mData.length === 0) {
                    mySelectedTags.postValue([allTags[0]])
                } else {
                    mySelectedTags.postValue(origin)
                }
            } else {
                let origin = mySelectedTags.mData
                origin.push(tag)
                if (mySelectedTags.mData.findIndex(tag => tag.index === 0) > -1) {
                    origin.splice(mySelectedTags.mData.findIndex(item => item.index === 0), 1)
                }
                mySelectedTags.postValue(origin)
            }
        }

        console.log(`${mySelectedTags.mData.length == 1} | ${mySelectedTags.mData.length} | ${mySelectedTags.mData.findIndex(tag => tag.index === 0) > -1}`)
        if (mySelectedTags.mData.length == 1 && mySelectedTags.mData.findIndex(tag => tag.index === 0) > -1) {
            setSelectedMarkdowns(allMarkdowns)
        } else {
            loadJson(`${ASSETS_URL}/json/markdowns.json`, request => {
                let markdowns = JSON.parse(request);
                let displayData = markdowns["markdowns"]

                for (let year in allMarkdowns) {
                    for (let md of allMarkdowns[year]) {
                        let notContain = true
                        for (let mdTag of md.tags) {
                            if (mySelectedTags.mData.findIndex(tag => tag.tagName === mdTag) > -1) {
                                // ÂåÖÂê´tag
                                notContain = false
                                break
                            }
                        }

                        if (notContain) {
                            displayData[year].splice(
                                displayData[year].findIndex(item => item.id === md.id),
                                1
                            )
                        }
                    }
                }

                for(const key in displayData){
                    if(displayData[key] == ''){
                        delete displayData[key]
                    }
                }

                setSelectedMarkdowns(displayData)
            })

        }
        select(selectedTags)
    }

    const select = (selectedTags) => {
        if (typeof document !== 'undefined') {
            for (let index = 0; index < allTags.length; index++) {
                let element = document.querySelector(`.shadowmeld-tag-${index}`) as HTMLButtonElement
                if (element.classList.contains(style.selected)) {
                    element.classList.remove(style.selected)
                    element.classList.add(style.unselected)
                }
            }

            for (let selectedTag of selectedTags) {
                let element = document.querySelector(`.shadowmeld-tag-${selectedTag.index}`) as HTMLButtonElement
                if (element.classList.contains(style.unselected)) {
                    element.classList.remove(style.unselected)
                    element.classList.add(style.selected)
                }
            }
        }
    }

    useEffect(() => {
        switchDir()
        select(selectedTags)
    })

    return <Layout dir={
        <BlogDir allYears={allYears} selectedMarkdowns={selectedMarkdowns} />}>
        <>
            <Head>
                <title>ÂΩ±ÈÅÅ | ÂçöÂÆ¢</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={style['blog-content']}>
                <main>
                    <section className={style.blog}>
                        <div className={`app-container ${style['app-container']}`}>

                            <Tags allTags={allTags} switchSelectTag={switchSelectTag}/>
                            <h2 className="section-h2">üöÄ ÂçöÂÆ¢</h2>
                            <Blogs allYears={allYears} selectedMarkdowns={selectedMarkdowns}/>
                        </div>

                    </section>

                </main>

                <div className="floating-button-cta">

                    <button className="floating-action-button floating-button-menu" id={style['floating-button-menu']}>
                        <span className="material-icons float-icon">menu</span>
                    </button>

                    <button className="floating-action-button" id="floating-button-top">
                        <span className="material-icons float-icon">expand_less</span>
                    </button>
                </div>
            </div>
        </>
    </Layout>
}

export function Tags({allTags, switchSelectTag}) {
    return (

        <div id={style['tags-cta']}>
            {
                allTags.map((tag) => (
                    <button
                        key={tag.index}
                        className={`button is-rounded ${style.button} ${style['shadowmeld-tag']} ${style['unselected']} shadowmeld-tag-${tag.index}`}
                        onClick={() => switchSelectTag(tag)}>
                        <span className={`${style.icon} icon material-icons`}>close</span><span
                        className="button-text">{`${tag.tagName} ${tag.tagCount}`}</span></button>
                ))
            }
        </div>

    )
}

export function Blogs({allYears, selectedMarkdowns}) {
    return (

        <div id={style['blog-cta']}>

            <div className={style['timeline-cta']}>
                {
                    allYears.map((year) => (

                        <>
                            {
                                selectedMarkdowns[year] != null ? <>

                                    <div key={year} className={style['timeline-box']}><h4 className={style['timeline-h4']}>{year}</h4>
                                        <hr/>
                                    </div>
                                    <div className={`${style['is-ancestor']} ${style['single-blog-cta']}`}>

                                        {
                                            selectedMarkdowns[year].reverse().map((markdown) => (

                                                <a key={markdown} className={`${style.boox} ${style['blog-link']}`} href={`/blog/${markdown.url.replace(/\.md$/, '')}`}>
                                                    <div className={style['item']}>
                                                        <div className={style['image-layout']} id={`${markdown.url.replace(/\.md$/, '')}`}
                                                             style={{backgroundImage: `url('/markdown/${markdown.image}')`}}></div>
                                                        <div className={style['blog-message-cta']}><h3
                                                            className={`title ${style.title} is-4 ${style['mat-h4']}`}>{markdown.title}</h3><p
                                                            className={style.content}>{markdown.content}</p><p className={style.date}><span
                                                            className={`icon material-icons ${style.icon}`}>calendar_today</span>{markdown.date}
                                                        </p></div>
                                                    </div>
                                                </a>
                                            ))
                                        }

                                    </div>
                                </> : <></>
                            }

                        </>
                    ))
                }

            </div>

        </div>
    )
}

export function BlogDir({allYears, selectedMarkdowns}) {
    return (

        <div className={style['blog-dir']}>
            {
                allYears.map((year) => (
                    <>
                        {
                            selectedMarkdowns[year] != null ? <>

                                <ul key={year}>
                                    <li className="dir-parent">
                                        <a className={style['dir-toggle']}>
                                            <span className={`${style['dir-arrow-down']} material-icons`}>event</span><span>{year}</span>
                                        </a>
                                        <ul className="dir-list">
                                            {
                                                selectedMarkdowns[year].map((markdown) => (
                                                    <li key={markdown.title} className={style['dir-item']}>
                                                        <a className={`${style['dir-link']} scroll`}
                                                           onClick={()=>scrollToAnchor(`${markdown.url.replace(/\.md$/, '')}`)}>
                                                            {markdown.title}
                                                        </a>
                                                    </li>
                                                ))
                                            }

                                        </ul>
                                    </li>
                                </ul>
                            </> :<></>
                        }
                    </>

                ))
            }
        </div>

    )
}

export async function getStaticProps() {
    let markdowns = await getMarkdowns()

    // console.log(`${allMarkdowns.length} | ${allTags.length} | ${allYears.length}`)

    console.log(`${markdowns}`)

    let tagData = markdowns['tags']
    let fullTag = []
    let allCount = 0
    for (let index = 0; index < tagData.length; index++) {
        fullTag[index] = {
            index: index + 1,
            tagName: tagData[index],
            tagCount: 0
        }
    }
    for (let year of markdowns['years']) {
        if (markdowns['markdowns'][year].length > 0) {
            for (let md of markdowns['markdowns'][year]) {
                for (const mdTag of md.tags) {
                    fullTag[tagData.indexOf(mdTag)].tagCount += 1;
                }
                allCount += 1;
            }
        }
    }
    fullTag.unshift({
        index: 0,
        tagName: "ÂÖ®ÈÉ®",
        tagCount: allCount
    })

    return {
        props: {
            allMarkdowns: markdowns['markdowns'],
            allTags: fullTag,
            allYears: markdowns['years']
        }
    }
}