import Layout from "../../components/layout";
import React, {useEffect, useState} from "react";
import Head from "next/head";
import style from "../../styles/Post.module.css";
import {getMarkdownContent, getMarkdowns} from "../../data/data-loader";
import {scrollToAnchor, switchDir} from "../../data/utils";

export default function Post({url}) {

    const [loadDir, setLoadDir] = useState(false)

    const initMarkdown = (url) => {

        const hljs = require('highlight.js');
        const md = require('markdown-it')({
            html: true,
            linkify: true,
            typographer: true,
            highlight: function (str, lang) {
                // 添加这两行才能正确显示 <>
                str = str.replace(/&lt;/g, "<");
                str = str.replace(/&gt;/g, ">");
                if (lang && hljs.getLanguage(lang)) {
                    try {
                        return '<pre class="hljs"><code>' +
                            hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
                            '</code></pre>';
                    } catch (__) {}
                }
                return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
            }
        }).use(require('markdown-it-deflist'));

        addTargetBlank(md)

        getMarkdownContent(url, data => {
            // 以免之前有内容
            document.querySelector('.md-content').innerHTML = ""
            const result = md.render(data);
            document.querySelector('.md-content').insertAdjacentHTML('afterbegin', result);

            setLoadDir(true)
        })

    }

    const addTargetBlank = (md) => {

        var defaultRender = md.renderer.rules.link_open || function(tokens, idx, options, env, self) {
            return self.renderToken(tokens, idx, options);
        };
        md.renderer.rules.link_open = function (tokens, idx, options, env, self) {
            // If you are sure other plugins can't add `target` - drop check below
            var aIndex = tokens[idx].attrIndex('target');

            if (aIndex < 0) {
                tokens[idx].attrPush(['target', '_blank']); // add new attribute
            } else {
                tokens[idx].attrs[aIndex][1] = '_blank';    // replace value of existing attr
            }

            // pass token to default renderer.
            return defaultRender(tokens, idx, options, env, self);
        };
    }

    useEffect(() => {
        if (loadDir == false) {
            if (typeof document !== 'undefined') {
                initMarkdown(url)
            }
        }

    })

    return <Layout dir={<PostDir loadDir={loadDir}/>}>
        <>
            <Head>
                <title>影遁 | 博客</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="stylesheet" href="/css/markdown-style.css"/>
            </Head>
            <div className={style['blog-content']}>
                <main>
                    <section className={style.post}>

                        <div className={`app-container ${style['app-container']}`}>

                            <a title="返回博客列表" aria-label="back to blog posts list" className={style['back-posts-list']} href="../blog" target="_self">← 返回博客列表</a>
                            <div className={`md-content`} />
                        </div>

                    </section>
                </main>

                <div className="floating-button-cta">

                    <button className="floating-action-button floating-button-menu" id={style['floating-button-menu']}>
                        <span className="material-icons float-icon">menu</span>
                    </button>

                    <button className="floating-action-button" id="floating-button-top">
                        <span className="material-icons float-icon">expand_less</span>
                    </button>
                </div>

            </div>
        </>
    </Layout>
}

export function PostDir({loadDir}) {


    const [h1, setH1] = useState(null)
    const [dirData, setDirData] = useState(null)

    const initDir = () => {

        let mdCta = document.querySelector('.md-content') as HTMLDivElement;
        let h23s = mdCta.querySelectorAll("h1, h2, h3, h4");

        let lastH2 = null;
        let lastH3 = null;

        let myDirData = []

        for (let i = 0; i < h23s.length; i++) {
            let heading = h23s[i] as HTMLHeadingElement;
            heading.id = `anchor-${i}`;

            if (heading.nodeName === "H1") {
                setH1({title: heading.innerText, url: `anchor-${i}`})
            }

            if (heading.nodeName === "H2") {
                lastH2 = {h2: {title: heading.innerText, url: `anchor-${i}`, child: []}}
                lastH3 = null
                myDirData.push(lastH2)
            }

            if (heading.nodeName === "H3") {

                lastH3 = {h3: {title: heading.innerText, url: `anchor-${i}`, child: []}}

                if (lastH2 != null) {
                    lastH2.h2.child.push(lastH3)
                } else {
                    myDirData.push(lastH3)
                }
            }

            if (heading.nodeName === "H4") {
                const dirItem = {h4: {title: heading.innerText, url: `anchor-${i}`}}
                if (lastH3 != null) {
                    lastH3.h3.child.push(dirItem)
                } else if (lastH2 != null) {
                    lastH2.h2.child.push(dirItem)
                } else {
                    myDirData.push(dirItem)
                }
            }
        }

        if (myDirData.length > 0) {
            setDirData(myDirData)
        }
    }

    useEffect(() => {
        if (loadDir == true && dirData == null) {
            if (typeof document !== 'undefined') {
                initDir()
            }
        }
    })

    return (
        <div className={style['blog-dir']}>
            <a className={`${style['dir-main-h1']} scroll`} onClick={()=>scrollToAnchor(`${h1.url}`)}>{h1 != null && h1.title}</a>
            <div className={`divider ${style.divider}`}></div>

            {dirData &&
                <ul>
                    {
                        dirData.map((dirItem) => (

                            <>
                                {
                                    Object.keys(dirItem)[0] === 'h2' &&
                                    <>
                                        <li key={dirItem} className='dir-parent'>
                                            <a className={`${style['dir-toggle']} scroll`}
                                               onClick={()=>scrollToAnchor(`${dirItem.h2.url}`)}>
                                                <span>{dirItem.h2.title}</span>
                                            </a>

                                            <ul className="dir-list">

                                                {
                                                    dirItem.h2.child.map((dirItemH34) => (

                                                        <>
                                                            {Object.keys(dirItemH34)[0] === 'h3' &&

                                                                <li className={style['dir-item']}>

                                                                    <a className={`${style['dir-link']} scroll`} onClick={()=>scrollToAnchor(`${dirItemH34.h3.url}`)}>{dirItemH34.h3.title}</a>

                                                                    <ul className="dir-list">
                                                                        {
                                                                            dirItemH34.h3.child.map((DirItemH4) => (
                                                                                <>
                                                                                    <li className={style['dir-item']}>
                                                                                        <a className={`${style['dir-link']} ${style['dir-link-h4']} scroll`} onClick={()=>scrollToAnchor(`${DirItemH4.h4.url}`)}>{DirItemH4.h4.title}</a>
                                                                                    </li>
                                                                                </>
                                                                            ))
                                                                        }
                                                                    </ul>
                                                                </li>
                                                            }

                                                            {Object.keys(dirItemH34)[0] === 'h4' &&
                                                                <>
                                                                    <li className={style['dir-item']}>
                                                                        <a className={`${style['dir-link']} ${style['dir-link-h4']} scroll`} onClick={()=>scrollToAnchor(`${dirItemH34.h4.url}`)}>{dirItemH34.h4.title}</a>
                                                                    </li>
                                                                </>
                                                            }

                                                        </>

                                                    ))
                                                }

                                            </ul>

                                        </li>
                                    </>

                                }

                                {

                                    Object.keys(dirItem)[0] == 'h3' &&
                                    <>
                                        <ul className="dir-list">
                                            <li className={style['dir-item']}>
                                                <a className={`${style['dir-link']} scroll`}
                                                   onClick={()=>scrollToAnchor(`${dirItem.h3.url}`)}>{dirItem.h3.title}</a>

                                                <ul className="dir-list">
                                                    {
                                                        dirItem.h3.child.map((DirItemH4) => (
                                                            <>
                                                                <li className={style['dir-item']}>
                                                                    <a className={`${style['dir-link']} ${style['dir-link-h4']} scroll`} onClick={()=>scrollToAnchor(`${DirItemH4.h4.url}`)}>{DirItemH4.h4.title}</a>
                                                                </li>
                                                            </>
                                                        ))
                                                    }
                                                </ul>
                                            </li>
                                        </ul>
                                    </>
                                }

                            </>

                        ))
                    }
                </ul>
            }
        </div>
    )
}

export async function getStaticPaths() {

    const paths = [];

    let markdowns = await getMarkdowns()
    for (let year of markdowns['years']) {
        if (markdowns['markdowns'][year].length > 0) {
            for (let md of markdowns['markdowns'][year]) {
                paths.push({params: {id: md.url.replace(/\.md$/, '')}})
            }
        }
    }
    return {
        paths,
        fallback: false,
    };
}

export async function getStaticProps({ params }) {

    return {
        props: {
            url: `/markdown/${params.id}.md`
        }
    }
}