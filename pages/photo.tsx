import Head from "next/head";
import {getPhotos} from "../data/data-loader";
import React, {useEffect, useLayoutEffect, useState} from "react";
import style from '../styles/Photo.module.css'
import {ProgressSpinner} from "../components/progress-spinner";
import {ProgressBar} from "../components/progress-bar";
import Layout from "../components/layout";

export default function Photo({photosData}) {

    const [myPhotosData, setPhotosData] = useState(photosData)
    const [isLoading, setIsLoading] = useState(true)
    const [previewPhoto, setPreviewPhoto] = useState(null)

    useLayoutEffect(() => {
        imageView().then(r => {
            setIsLoading(false)
            }
        )
    }, [])

    return (
        <>
            <Head>
                <title>ÂΩ±ÈÅÅ | Áõ∏ÂÜå</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className={style['photo-cta']}>
                    <section>
                        <div className="app-container">
                            <div>

                                <h2 className="section-h2">üì∏ Áõ∏ÂÜå</h2>
                                <article className="progress-cta" id="progress-cta" style={{padding: `8px 0`}}>
                                    <ProgressBar mode={isLoading ? 'indeterminate' : 'hidden'}/>
                                </article>
                                <div>
                                    <div id={style['img_wrap']}>
                                        {
                                            myPhotosData.map((photo) => (
                                                <ImgX key={photo.photoUrl} photo={photo} onClick={() => {
                                                    setPreviewPhoto(photo)
                                                }}/>
                                            ))
                                        }
                                    </div>
                                </div>
                            </div>

                            <PhotoPreview previewPhoto={previewPhoto} onChange={(value) => {
                                setPreviewPhoto(null)
                            }}/>

                        </div>
                    </section>
                </div>

            </main>
        </>
    )
}

Photo.getLayout = function getLayout(content) {
    return (
        <Layout>
            {content}
        </Layout>
    )
}
export function PhotoPreview({previewPhoto, onChange}) {

    if (previewPhoto == null) {
        return null
    } else {
        return (

            <div className={`${style['dialog-mask']} ${style['is-display']}`} id={style['dialog-mask']} onClick={() => {
                onChange(null)
            }}>

                    <div className={style['photo-preview-linear']}>
                        <div className={style['photo-preview-cta']}>

                            <img className={style['photo-preview']} id={style['photo-preview']} src={`/photos/${previewPhoto.photoUrl}`} alt={previewPhoto.description}/>

                            <div className={style['photo-text']}>

                                <p className={style['photo-description']} id={style['photo-description']}>
                                    {previewPhoto.description}
                                </p>
                                <p className={style['photo-date']} id={style['photo-date']}>
                                    {`ÊãçÊëÑÊó•ÊúüÔºö${previewPhoto.date}`}
                                </p>
                            </div>
                        </div>
                    </div>
            </div>
        )
    }

}

export function ImgX({photo, onClick}) {
    return (
        <div className={style['img_x']} onClick={onClick}>
            <i></i>
            <img src={`/photos/${photo.photoUrl}`}/>
        </div>
    )
}

export async function getStaticProps() {
    let photosData = await getPhotos()

    return {
        props: {
            photosData: photosData.reverse()
        }
    }
}

async function imageView(): Promise<void> {
    const imgs = document.getElementById(style['img_wrap']).getElementsByClassName(style['img_x']);
    console.log(imgs.length);
    for (let i = 0; i < imgs.length; i++) {
        imgbox(imgs[i], imgs.length - i);
    }
}

let isLoading = true;

function imgbox(obj, i): void {
    if (typeof document !== 'undefined') {
        let width = (document.getElementById(style['img_wrap']) as HTMLDivElement).clientWidth
        console.log('w' + width)
        const imgSrc = obj.querySelector('img').getAttribute('src')
        getImageWidth(imgSrc, (w, h) => {
            obj.querySelector('i').style.paddingBottom = `${h / w * 100}%`
            obj.style.flexGrow = `${(w * 100) / h}`
            // obj.style.flexBasis = `${(w * (width * 0.33)) / h}px`
            if (i === 1 && isLoading) {
                isLoading = false;
            }
        });
    }
}

function getImageWidth(url, callback): void {
    const img = new Image();
    img.src = url;
    if (img.complete) {
        callback(img.width, img.height);
    } else {
        img.onload = () => {
            callback(img.width, img.height);
        };
    }
}