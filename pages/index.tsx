import Head from 'next/head'
import style from '../styles/Home.module.css'
import {hexToRGBA} from "../data/utils";
import {getProjects, getSkills} from "../data/data-loader";
import React, {useEffect, useRef, useState} from "react";
import Layout from "../components/layout";

export default function Home({skillsData, projectData}) {

    const [mySkillsData, setSkillsData] = useState(skillsData);
    const [myProjectData, setProjectData] = useState(projectData);

    const [component, setComponent] = useState();

    let selectedSkill = mySkillsData[0]

    const Normal = () => {

        const onChange = (value) => {
            console.log(`${value.title}`)
            selectedSkill = value
        };


        return(
            <>
                <div className={style.normal}>
                    <Features/>
                    <Skills skillsData={mySkillsData} onChange={onChange} selectedSkill={selectedSkill}/>
                    <Projects projectsData={myProjectData}/>
                </div>
                <div className={style.desktop}>
                </div>
            </>
        )
    }


    const Desktop = () => {

        // 监听子组件值的改变，从而改变value值
        const onChange = (value) => {
            console.log(`${value.title}`)
            selectedSkill = value
        };

        return(
            <>
                <div className={style.normal}>
                    <Features/>
                    <Projects projectsData={myProjectData}/>
                </div>
                <div className={style.desktop}>
                    <Skills skillsData={mySkillsData} onChange={onChange} selectedSkill={selectedSkill}/>
                </div>
            </>
        )
    }

    const layoutPages = (x) => {
        if (x) {
            console.log(`desktop`)
            // @ts-ignore
            setComponent(Desktop)
        } else {
            console.log(`normal`)
            // @ts-ignore
            setComponent(Normal)
        }
    }

    const updateDimensions = () => {
        let mediaQuery = window.matchMedia('(min-width: 1200px)')
        layoutPages(mediaQuery.matches)
        mediaQuery.addEventListener('change', event => {
            layoutPages(event.matches)
        })
    }
    useEffect(() => {
        if (typeof window !== 'undefined') {
            updateDimensions()
        }
    }, []);

    return (
        <>
            <Head>
                <title>影遁 | 主页</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className={style.columns} id={style.columns}>
                    {component}
                </div>
            </main>
        </>
    )
}

Home.getLayout = function getLayout(content) {
    return (
        <Layout>
            {content}
        </Layout>
    )
}

export function Features() {
    return (
        <section className={style.features}>
            <div className={style['app-container']}>
                    <img className={style['info-logo']} src="/img/shadowmeld.png" alt="头像"/>
                    <h3 className={style.hello}><span className={style.about_wave__2bBrx}>👋</span> 你好吖！我是影遁 😶‍🌫️</h3>
                <a className={style.text} href="/dashboard">
                    <p>我正在努力学习 CG动画创作 以及 应用程序设计，我喜欢守望先锋和电子音乐！喜欢《天使降临到我身边！》</p>
                </a>
            </div>
        </section>
    )
}

export function Divider() {
    return (
        <section>
            <div className={style['app-container']}>
                <div className="divider"></div>
            </div>
        </section>
    )
}

export function Skills({skillsData: skillsData, onChange: onChange, selectedSkill: selectedSkill}) {

    const [mySkill, setMySkill] = useState(selectedSkill)

    return (

        <section className={style.skills}>

            <div className={style['app-container']}>

                <h2 className='section-h2'>Skills</h2>

                <div className={style['skills-cta']} id={style['skills-cta']}>

                    {skillsData.map((skill) => (
                        <SkillChip key={skill.id} skill={skill} onClick={() => {
                            console.log(skill.title)
                            onChange(skill)
                            setMySkill(skill)
                        }}></SkillChip>
                    ))}
                </div>

                <SkillBar skill={mySkill}></SkillBar>
            </div>
        </section>
    )
}

export function SkillBar({skill}) {

    const ref = useRef(null);

    console.log(`需要进度为：${skill.rating}`)
    useEffect(() => {
        console.log(`需要进度为2：${skill.rating}`)
        const el2 = ref.current;
        setupAnimator(skill, el2)
    })

    return (
        <div className={style['skills-bar-cta']} id={style['skills-bar-cta']} style={{ backgroundColor: skill.primary}} >

            <img id={style['skill-logo']} src={`${skill.icon}`} alt="技能" width="20"
                 height="20"/>
            <span className={style.text} id="skills-bar-text" style={{color: skill.titleColor}}>{skill.title}</span>

            <div id={style['out-progress']}>
                <div id={style['in-progress']} ref={ref}>
                </div>
            </div>

        </div>
    )
}

export function Projects({projectsData}) {

    const [listNormal, setListNormal] = useState([])
    const [listDesktop, setListDesktop] = useState([])

    const layoutProjects = (x) => {

        if (x) {
            let normal = []
            let desktop = []
            // 多行
            for (let i = 0; i　< projectsData.length; i++) {
                if (i % 2 == 0) {
                    normal.push(projectsData[i])
                } else {
                    desktop.push(projectsData[i])
                }
            }

            setListNormal(normal)
            setListDesktop(desktop)
        } else {
            // 单行
            setListDesktop([])
            setListNormal(projectsData)
        }
    }

    const updateDimensions = () => {
        let mediaQuery = window.matchMedia('(min-width: 768px)')
        layoutProjects(mediaQuery.matches)
        mediaQuery.addEventListener('change', event => {
            layoutProjects(event.matches)
        })
    }
    useEffect(() => {
        if (typeof window !== 'undefined') {
            updateDimensions()
        }
    }, []);

    return (

        <section className={style.projects}>

            <div className={style['app-container']}>

                <h2 className='section-h2'>Projects</h2>

                <div className={style['project-cta']}>
                    <div className='columns' id='columns'>

                        <div className={`${style.list} column list-normal`} id='list-normal'>
                            {
                                listNormal.map((project) => (
                                    <ProjectChip key={project.name} project={project}/>
                                ))
                            }
                        </div>

                        <div className={`${style.list} column list-desktop`} id='list-desktop'>
                            {
                                listDesktop.map((project) => (
                                    <ProjectChip key={project.name} project={project}/>
                                ))
                            }
                        </div>

                    </div>

                </div>
            </div>

        </section>
    )
}

export function ProjectChip({project}) {
    return (
        <a className={`${style['list-item']} project-link`} target="_blank"
           href={project.url} rel="noreferrer">
            <div className={style.item}>
                <img className={style['project-icon']}
                     alt="ProjectIcon"
                     src={`/img/${project.icon}`}/>
                <div className={style['text-layout']}>
                    <h2 className='mat-h2'>{project.name}</h2>
                    <p className={style.description}>{project.content}</p>
                </div>
            </div>
        </a>
    )
}

export function SkillChip({skill, onClick}) {
    const [isMounted,setIsMounted] = useState(false); // Need this for the react-tooltip

    useEffect(() => {
        setIsMounted(true);
    },[]);

    return (
        <>
            <style jsx>{`

              .${style.skill}.skill-${skill.id} {
                background-color: transparent;
              }

              .${style.skill}.skill-${skill.id} {
                border: 1px solid #707070;
              }

              .${style.skill}.skill-${skill.id}:focus, ${style.skill}.skill-${skill.id}.is-focused {
                border-color: ${skill.primary};
              }

              .${style.skill}.skill-${skill.id}:focus .img-icon path, ${style.skill}.skill-${skill.id}.is-focused .img-icon path{
                fill: white;
                fill-opacity: 1;
              }
              
              .${style.skill}.skill-${skill.id}:focus:not(:active), ${style.skill}.skill-${skill.id}.is-focused:not(:active) {
                box-shadow: 0 0.5em 1em -0.125em ${hexToRGBA('#000000', 0.2)}, 0 0px 0 0.125em ${skill.iconColor};
                border-color: ${skill.primary};
                background-color: ${skill.primary};
                color: ${skill.titleColor};
              }
              
              .${style.skill}.skill-${skill.id}:hover, ${style.skill}.skill-${skill.id}.is-hovered {
                border-color: ${skill.primary};
              }

              .${style.skill}.skill-${skill.id}:active, ${style.skill}.skill-${skill.id}.is-active {
                border-color: ${skill.primary};
              }

              .${style.skill}.skill-${skill.id} .button-text {
                color: ${skill.titleColor};
              }
            `}

            </style>
            <style jsx global>{`
              .img-icon {
                height: 22px;
                width: 22px;
              }
              
              .img-icon path{
                fill: black;
                fill-opacity: 1;
              }
              
              .${style.skill}.skill-${skill.id}:focus:not(:active) .img-icon path, ${style.skill}.skill-${skill.id}.is-focused:not(:active) .img-icon path{
                fill: ${skill.titleColor};
                fill-opacity: 1;
              }
            `}</style>

            <button className={`button is-rounded ${style.button} ${style.skill} skill-${skill.id}`} onClick={onClick}>
                {isMounted && <span className={style.icon} dangerouslySetInnerHTML={{__html: `<img class=\"img-icon\" src=${skill.icon} onload=\"SVGInject(this)\" alt=\"SkillData Icon\">`}}>
                </span>}
                <span className={style['button-text']}>{skill.title}</span>
            </button>

        </>
    )
}

export async function getStaticProps() {
    let skillData = await getSkills()
    let projectData = await getProjects()
    return {
        props: {
            skillsData: skillData,
            projectData: projectData
        },
    };
}

let isAnimateId = -1;
let myRatingRecorder = 0;

function setupAnimator(skill, progressBar): void {

    progressBar.style.backgroundColor = hexToRGBA(skill.primary, 0.6);

    // if (!(isAnimateId === skill.id)) {
        isAnimateId = skill.id;
        const ratingRecorder = myRatingRecorder;
        myRatingRecorder = skill.rating;
        animate({
            timing: (timeFraction) => timeFraction,
            draw: (progress) => {
                progressBar.style.width = (ratingRecorder + (progress * (skill.rating - ratingRecorder))) + '%';
            },
            duration: 300
        });
    // }
}

function animate({timing, draw, duration}): void {
    const start = performance.now();
    requestAnimationFrame(function animate(time): void {
        // timeFraction 从 0 增加到 1
        let timeFraction = (time - start) / duration;
        if (timeFraction > 1) { timeFraction = 1; }
        // 计算当前动画状态
        const progress = timing(timeFraction);
        draw(progress); // 绘制
        if (timeFraction < 1) {
            requestAnimationFrame(animate);
        }
    });
}
